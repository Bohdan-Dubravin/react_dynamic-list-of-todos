{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","urlEndPoint","a","fetch","result","json","data","getAllTodos","getUser","userId","TodoList","props","todos","setSelectedUserId","currentId","onShuffle","useState","preparedTodos","setPrepaderTodos","queryParam","setQueryParam","selectOption","setSelectedOption","useEffect","filter","todo","isQuery","title","toLocaleLowerCase","includes","completed","className","htmlFor","type","id","value","onChange","e","target","onClick","map","checked","readOnly","classNames","CurrentUser","user","clearId","name","email","phone","App","setTodos","selectedUserId","setUser","isError","setIsError","userFromAPI","todosFromAPI","randomizeList","useCallback","randomizeTodos","i","length","j","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"kUAIeA,E,8EAAf,WAAuBC,GAAvB,iBAAAC,EAAA,sEACuBC,MAAMF,GAD7B,cACQG,EADR,gBAEqBA,EAAOC,OAF5B,cAEQC,EAFR,yBAISA,GAJT,4C,sBAOO,SAASC,IACd,OAAOP,EAXG,2CAcL,SAASQ,EAAQC,GACtB,OAAOT,EAAQ,GAAD,OAdC,0CAcD,YAAgBS,I,mCCJnBC,EAA4B,SAACC,GACxC,IACEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,kBACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,UAEF,EAA0CC,mBAASJ,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0CJ,mBAAS,OAAnD,mBAAOK,EAAP,KAAqBC,EAArB,KA4BA,OAhBAC,qBAAU,WACRL,EAAiBN,EAAMY,QAAO,SAAAC,GAC5B,IAAMC,EAAUD,EAAKE,MAAMC,oBACxBC,SAASV,EAAWS,qBAEvB,OAAQP,GACN,IAAK,SACH,OAAOK,IAAYD,EAAKK,UAC1B,IAAK,YACH,OAAOJ,GAAWD,EAAKK,UACzB,QACE,OAAOJ,SAGZ,CAACP,EAAYP,EAAOS,IAGrB,sBAAKU,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,2BAAf,UACE,uBACEC,QAAQ,SACRD,UAAU,wBAFZ,yBAMA,uBACEE,KAAK,OACLF,UAAU,kBACVG,GAAG,SACHC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAciB,EAAEC,OAAOH,UAE1C,wBACEF,KAAK,SACLM,QAASxB,EAFX,uBAMA,yBACEoB,MAAOd,EACPe,SAnDR,SAAsBC,GACpBf,EAAkBe,EAAEC,OAAOH,QAgDvB,UAIE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAEF,oBAAIJ,UAAU,iBAAiB,UAAQ,cAAvC,SACGd,EAAcuB,KAAI,SAAAf,GAAI,OACpBA,EAAKK,UA0BF,qBAEEC,UAAU,yCAFZ,UAIE,kCACE,uBAAOE,KAAK,WAAWQ,SAAO,EAACC,UAAQ,IACvC,4BAAIjB,EAAKE,WAEX,wBACEI,UAAU,+BACVE,KAAK,SACL,UAAQ,aACRM,QAAS,WA7F3B,IAAsBL,MA6FyBT,EAAKhB,UA5FvCK,GACTD,EAAkBqB,IAuFN,yBAMYT,EAAKhB,YAbZgB,EAAKS,IA1Bd,qBAEEH,UAAU,2CAFZ,UAIE,kCACE,uBAAOE,KAAK,WAAWS,UAAQ,IAC/B,4BAAIjB,EAAKE,WAEX,wBACEI,UAAWY,IACT,+BACA,CACE,mCACDlB,EAAKhB,UAAYK,IAGpBmB,KAAK,SACL,UAAQ,aACRM,QAAS,kBAAM1B,GAAmBY,EAAKhB,SAVzC,yBAYYgB,EAAKhB,YAnBZgB,EAAKS,gBC3EbU,G,MAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OAC1C,qBAAKf,UAAU,GAAf,SACGc,GACC,sBAAKd,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBc,EAAKX,QACjE,oBAAIH,UAAU,oBAAoB,UAAQ,WAA1C,SAAsDc,EAAKE,OAC3D,mBAAGhB,UAAU,qBAAb,SAAmCc,EAAKG,QACxC,mBAAGjB,UAAU,qBAAb,SAAmCc,EAAKI,QACxC,wBACEhB,KAAK,SACLF,UAAU,mBACVQ,QAAS,kBAAMO,EAAQ,IAHzB,0BCuEOI,EA/EO,WACpB,MAA0BlC,mBAAiB,IAA3C,mBAAOJ,EAAP,KAAcuC,EAAd,KACA,EAA4CnC,mBAAS,GAArD,mBAAOoC,EAAP,KAAuBvC,EAAvB,KACA,EAAwBG,mBAAsB,MAA9C,mBAAO6B,EAAP,KAAaQ,EAAb,KACA,EAA8BrC,mBAAS,IAAvC,mBAAOsC,EAAP,KAAgBC,EAAhB,KAJ0B,4CAM1B,4BAAArD,EAAA,+EAEyBK,IAFzB,OAEUH,EAFV,OAIImD,EAAW,IACXJ,EAAS/C,GALb,gDAOI+C,EAAS,IAETI,EAAW,UAAD,oDATd,0DAN0B,kEAmB1B,4BAAArD,EAAA,+EAEyBM,EAAQ4C,GAFjC,OAEUhD,EAFV,OAIImD,EAAW,IACXF,EAAQjD,GALZ,gDAOIiD,EAAQ,MACRE,EAAW,UAAD,oDARd,0DAnB0B,sBA+B1BhC,qBAAU,WACH6B,GAhCmB,mCAoCxBI,KACC,CAACJ,IAEJ7B,qBAAU,YAvCgB,mCAwCxBkC,KACC,IAEH,IAAMC,EAAgBC,uBAAY,WAGhC,IAFA,IAAMC,EAAc,YAAOhD,GAElBiD,EAAID,EAAeE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAClD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADQ,EAIhD,CAACD,EAAeG,GAAIH,EAAeC,IADpCD,EAAeC,GAHkC,KAG9BD,EAAeG,GAHe,KAOpDZ,EAASS,KACR,CAAChD,IAEJ,OACE,sBAAKmB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACG,cAAC,EAAD,CACCnB,MAAOA,EACPC,kBAAmBA,EACnBC,UAAWsC,EACXrC,UAAW2C,KACP,6CAGR,qBAAK3B,UAAU,eAAf,SACE,sBAAKA,UAAU,yBAAf,UACGqB,EACC,cAAC,EAAD,CAAaN,QAASjC,EAAmBgC,KAAMA,IAC7C,mBACHS,GAAW,4BAAIA,aC9E1Ba,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.65c27ff5.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst URL = 'https://mate.academy/students-api/todos';\nconst URLusers = 'https://mate.academy/students-api/users';\n\nasync function request(urlEndPoint: string) {\n  const result = await fetch(urlEndPoint);\n  const data = await result.json();\n\n  return data;\n}\n\nexport function getAllTodos() {\n  return request(URL);\n}\n\nexport function getUser(userId: number) {\n  return request(`${URLusers}/${userId}`);\n}\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>;\n  currentId: number;\n  onShuffle: () => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    setSelectedUserId,\n    currentId,\n    onShuffle,\n  } = props;\n  const [preparedTodos, setPrepaderTodos] = useState(todos);\n  const [queryParam, setQueryParam] = useState('');\n  const [selectOption, setSelectedOption] = useState('all');\n\n  function handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setSelectedOption(e.target.value);\n  }\n\n  function setNewUserId(id: number) {\n    if (id !== currentId) {\n      setSelectedUserId(id);\n    }\n  }\n\n  useEffect(() => {\n    setPrepaderTodos(todos.filter(todo => {\n      const isQuery = todo.title.toLocaleLowerCase()\n        .includes(queryParam.toLocaleLowerCase());\n\n      switch (selectOption) {\n        case 'active':\n          return isQuery && !todo.completed;\n        case 'completed':\n          return isQuery && todo.completed;\n        default:\n          return isQuery;\n      }\n    }));\n  }, [queryParam, todos, selectOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <label\n          htmlFor=\"search\"\n          className=\"TodoList__input-lable\"\n        >\n          Search todo\n        </label>\n        <input\n          type=\"text\"\n          className=\"TodoList__input\"\n          id=\"search\"\n          value={queryParam}\n          onChange={(e) => setQueryParam(e.target.value)}\n        />\n        <button\n          type=\"button\"\n          onClick={onShuffle}\n        >\n          Randomize\n        </button>\n        <select\n          value={selectOption}\n          onChange={handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {preparedTodos.map(todo => (\n            !todo.completed ? (\n              <li\n                key={todo.id}\n                className=\"TodoList__item TodoList__item--unchecked\"\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames(\n                    'TodoList__user-button button',\n                    {\n                      'TodoList__user-button--selected':\n                    +todo.userId === +currentId,\n                    },\n                  )}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => setSelectedUserId(+todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            )\n              : (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--checked\"\n                >\n                  <label>\n                    <input type=\"checkbox\" checked readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    data-cy=\"userButton\"\n                    onClick={() => setNewUserId(+todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from '../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User | null;\n  clearId: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ user, clearId }) => (\n  <div className=\"\">\n    {user && (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n        <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__btn\"\n          onClick={() => clearId(0)}\n        >\n          Clear\n        </button>\n      </div>\n    )}\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getAllTodos, getUser } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './components/types/Todo';\nimport { User } from './components/types/User';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [user, setUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState('');\n\n  async function todosFromAPI() {\n    try {\n      const result = await getAllTodos();\n\n      setIsError('');\n      setTodos(result);\n    } catch (error) {\n      setTodos([]);\n\n      setIsError(`Erorr: ${error}. Fail to download data from sevrer`);\n    }\n  }\n\n  async function userFromAPI() {\n    try {\n      const result = await getUser(selectedUserId);\n\n      setIsError('');\n      setUser(result);\n    } catch (error) {\n      setUser(null);\n      setIsError(`Erorr: ${error}. Fail to download user from sevrer`);\n    }\n  }\n\n  useEffect(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    userFromAPI();\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    todosFromAPI();\n  }, []);\n\n  const randomizeList = useCallback(() => {\n    const randomizeTodos = [...todos];\n    // eslint-disable-next-line\n    for (let i = randomizeTodos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [randomizeTodos[i], randomizeTodos[j]]\n      = [randomizeTodos[j], randomizeTodos[i]];\n    }\n\n    setTodos(randomizeTodos);\n  }, [todos]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {<TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n          currentId={selectedUserId}\n          onShuffle={randomizeList}\n        /> || <p>Loading...</p>}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser clearId={setSelectedUserId} user={user} />\n          ) : 'No user selected'}\n          {isError && <p>{isError}</p>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}